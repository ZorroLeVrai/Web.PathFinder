(()=>{"use strict";class t{constructor(t){this._settingsModel=t,this.addGridSizeChangeListener=t=>{this.inputRowElement.addEventListener("change",t),this.inputColumnElement.addEventListener("change",t)},this.addCloseSettingsListener=t=>{var e;null===(e=this.cancelSettingsElement)||void 0===e||e.addEventListener("click",t)},this.addCommitSettingsListener=t=>{var e;null===(e=this.commitSettingsElement)||void 0===e||e.addEventListener("click",t)},this.displayWarningLabel=t=>{t?this.warningLabelElement.classList.remove("hidden"):this.warningLabelElement.classList.add("hidden")},this.handleUseDelayChange=()=>{this.setNbDelayElement.disabled=!this.useDelayElement.checked},this.updateView=()=>{this.inputRowElement.value=this._settingsModel.gridSize.nbLine.toString(),this.inputColumnElement.value=this._settingsModel.gridSize.nbColumn.toString(),this.useHeuristicElement.checked=this._settingsModel.useHeuristic,this.useDelayElement.checked=this._settingsModel.useDelay,this.setNbDelayElement.value=this._settingsModel.delayInMs.toString()},this.settingsFormElement=document.getElementById("settings-form"),this.cancelSettingsElement=document.getElementById("cancel-settings"),this.commitSettingsElement=document.getElementById("commit-settings"),this.inputRowElement=document.getElementById("nb-rows"),this.inputColumnElement=document.getElementById("nb-columns"),this.useHeuristicElement=document.getElementById("use-heuristic"),this.useDelayElement=document.getElementById("use-delay"),this.setNbDelayElement=document.getElementById("nb-delay"),this.warningLabelElement=document.getElementById("show-warning"),this.useDelayElement.addEventListener("change",this.handleUseDelayChange)}hide(){this.settingsFormElement.classList.add("removed")}display(){var t;null===(t=this.settingsFormElement)||void 0===t||t.classList.remove("removed"),this.updateView()}get rowSize(){return this.inputRowElement.value}get columnSize(){return this.inputColumnElement.value}get showExploration(){return this.useHeuristicElement.checked}get useDelay(){return this.useDelayElement.checked}get nbDelay(){return parseInt(this.setNbDelayElement.value)}}class e{constructor(e){this.settingsModel=e,this.handleGridSizeChange=()=>{const t=this.isGridSizeChange();this.settingsView.displayWarningLabel(t)},this.registerMediator=t=>{this.mediator=t},this.closeSettings=()=>{this.settingsView.hide(),this.mediator.disableSettingsControls(!1)},this.showSettings=()=>{this.settingsView.display()},this.setGridSize=(t,e)=>{this.settingsModel.gridSize={nbLine:t,nbColumn:e}},this.updateModel=t=>{t&&this.setGridSize(parseInt(this.settingsView.rowSize),parseInt(this.settingsView.columnSize)),this.settingsModel.useHeuristic=this.settingsView.showExploration,this.settingsModel.useDelay=this.settingsView.useDelay,this.settingsModel.delayInMs=this.settingsView.nbDelay},this.isGridSizeChange=()=>{const t=parseInt(this.settingsView.rowSize);return parseInt(this.settingsView.columnSize)!==this.settingsModel.gridSize.nbColumn||t!==this.settingsModel.gridSize.nbLine},this.commitSettings=()=>{const t=this.isGridSizeChange();this.updateModel(t),t&&this.mediator.updateGameDisplay(this.settingsModel.gridSize),this.closeSettings(),this.mediator.disableSettingsControls(!1)},this.settingsView=new t(e),this.settingsView.addCloseSettingsListener(this.closeSettings),this.settingsView.addCommitSettingsListener(this.commitSettings),this.settingsView.addGridSizeChangeListener(this.handleGridSizeChange)}}var i,s;!function(t){t[t.Default=0]="Default",t[t.StartPosition=1]="StartPosition",t[t.EndPosition=2]="EndPosition",t[t.Wall=3]="Wall",t[t.Path=4]="Path",t[t.Explored=5]="Explored",t[t.ToExplore=6]="ToExplore"}(i||(i={})),function(t){t[t.SetStart=0]="SetStart",t[t.SetEnd=1]="SetEnd",t[t.SetWall=2]="SetWall",t[t.RemoveWall=3]="RemoveWall",t[t.Resolved=4]="Resolved"}(s||(s={}));class n{constructor(t,e){this.isOnPosition=t=>this.x===t.x&&this.y===t.y,this.toNumber=()=>1e3*this.y+this.x,this.getAllAdjacentPositions=()=>[new n(this.x-1,this.y-1),new n(this.x-1,this.y),new n(this.x-1,this.y+1),new n(this.x,this.y-1),new n(this.x,this.y+1),new n(this.x+1,this.y-1),new n(this.x+1,this.y),new n(this.x+1,this.y+1)],this.x=t,this.y=e}}const o=new Map([[i.Default,"white"],[i.StartPosition,"green"],[i.EndPosition,"blue"],[i.Wall,"grey"],[i.Path,"red"],[i.Explored,"orange"],[i.ToExplore,"yellow"]]);class a{constructor(t){this.gameModel=t,this.addShowSettingsListener=t=>{var e;null===(e=this.settingsButton)||void 0===e||e.addEventListener("click",t)},this.disableSettingsControls=t=>{this.newGridButton.disabled=t,this.clearSolutionButton.disabled=t,this.settingsButton.disabled=t,this.solveButton.disabled=t,this.gameModeElements.forEach((e=>{e.disabled=t}))},this.updateCanvasSize=()=>{this.canvasElement.width=window.innerWidth,this.canvasElement.height=window.innerHeight-this.commandDiv.offsetHeight-4},this.setBackGroundColor=()=>{this.canvasContext.fillStyle="black",this.canvasContext.fillRect(0,0,this.canvasElement.width,this.canvasElement.height)},this.displayGrid=()=>{const t=this.gameModel.settingsModel.gridSize.nbLine,e=this.gameModel.settingsModel.gridSize.nbColumn;for(let i=0;i<e;++i)for(let s=0;s<t;++s){const n=Math.round(i*this.canvasElement.width/e)+1,o=Math.round((i+1)*this.canvasElement.width/e)-1,a=Math.round(s*this.canvasElement.height/t)+1,h=Math.round((s+1)*this.canvasElement.height/t)-1;this.canvasContext.fillStyle=this.getTileColor(i,s),this.canvasContext.fillRect(n,a,o-n,h-a)}},this.getTileColor=(t,e)=>{var i;return null!==(i=o.get(this.gameModel.grid[t][e]))&&void 0!==i?i:"white"},this.updateDisplay=()=>{this.updateCanvasSize(),this.setBackGroundColor(),this.displayGrid()},this.addCanvasListener=(t,e)=>{var i;null===(i=this.canvasElement)||void 0===i||i.addEventListener(t,e)},this.addGameModeListener=t=>{this.gameModeElements.forEach((e=>{e.addEventListener("change",t)}))},this.addNewGridListener=t=>{this.newGridButton.addEventListener("click",t)},this.addClearSolutionListener=t=>{this.clearSolutionButton.addEventListener("click",t)},this.addSolveListener=t=>{this.solveButton.addEventListener("click",t)},this.getPosition=(t,e)=>{const i=this.gameModel.settingsModel.gridSize.nbLine,s=this.gameModel.settingsModel.gridSize.nbColumn,o=this.commandDiv.offsetHeight,a=this.canvasElement.width,h=this.canvasElement.height,l=t,d=e-o;return new n(Math.floor(s*l/a),Math.floor(i*d/h))},this.getSelectedMode=()=>(this.gameModeElements.forEach((t=>{const e=t;if(e.checked)return e.value})),""),this.canvasElement=document.getElementById("mainCanvas"),this.commandDiv=document.getElementById("commandMenu"),this.settingsButton=document.getElementById("settings-button"),this.newGridButton=document.getElementById("new-grid-button"),this.clearSolutionButton=document.getElementById("clear-solution-button"),this.solveButton=document.getElementById("solve-button"),this.canvasContext=this.canvasElement.getContext("2d"),this.gameModeElements=document.querySelectorAll("input[name='command']"),this.updateDisplay()}}class h{constructor(t,e,i,s){this.estimatedCost=s,this.previousNodePosition=null,this.pathLength=Number.MAX_VALUE,this.updateFullCost=()=>this.fullCost=this.pathLength+this.estimatedCost,this.setPathLength=(t,e)=>{e<this.pathLength&&(this.previousNodePosition=t,this.pathLength=e,this.updateFullCost())},this.getFullCost=()=>this.fullCost,this.currentPostion=t,this.setPathLength(e,i)}}class l{constructor(t,e){this.gameController=t,this.exploredNodes=new Map,this.nodeToExplore=new Map,this.updateNode=(t,e,i)=>{const s=t.toNumber(),n=this.nodeToExplore.get(s);null!=n?n.setPathLength(e,i):(this.nodeToExplore.set(s,this.createPathInformation(t,e,i)),this.setToExplorePosition(t))},this.setToExplorePosition=t=>{t.isOnPosition(this.startPosition)||t.isOnPosition(this.endPosition)||this.gameController.setToExplorePosition(t)},this.setExploredPosition=t=>{t.isOnPosition(this.startPosition)||this.gameController.setExploredPosition(t)},this.setPathPosition=t=>{t.isOnPosition(this.startPosition)||t.isOnPosition(this.endPosition)||this.gameController.setPathPosition(t)},this.createPathInformation=(t,e,i)=>new h(t,e,i,this.getRemainingWeight(t)),this.getRemainingWeight=t=>this.useHeuristic?this.getDistanceToEndPoint(t):0,this.getDistanceToEndPoint=t=>this.getDistance(t,this.endPosition),this.getDistance=(t,e)=>Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)),this.isCurrentNodeCheaper=(t,e)=>{const i=e.getFullCost()-t.getFullCost();return 0===i?e.pathLength<t.pathLength:i<0},this.getBestNode=()=>{let t=null;for(let e of this.nodeToExplore.values())(null==t||this.isCurrentNodeCheaper(t,e))&&(t=e);return t},this.getAdjacentNodes=t=>{const e=[];for(let i of t.getAllAdjacentPositions())!this.gameController.isInsideGrid(i)||this.gameController.isOnWall(i)||this.exploredNodes.has(i.toNumber())||e.push(i);return e},this.setNodeAsExplored=t=>{const e=t.currentPostion.toNumber();this.nodeToExplore.delete(e),this.exploredNodes.set(e,t),this.setExploredPosition(t.currentPostion)},this.nextStep=()=>{let t=this.getBestNode();if(null==t)return!1;if(t.currentPostion.isOnPosition(this.endPosition))return this.inferWholePath(t),!1;let e=this.getAdjacentNodes(t.currentPostion);for(let i of e)this.updateNode(i,t.currentPostion,t.pathLength+this.getDistance(t.currentPostion,i));return this.setNodeAsExplored(t),!0},this.inferWholePath=t=>{let e=t;for(;null!=e;){this.setPathPosition(e.currentPostion);let t=e.previousNodePosition;e=null==t?null:this.exploredNodes.get(t.toNumber())}};const i=t.getStartPosition(),s=t.getEndPosition();this.useHeuristic=e,void 0!==i?this.startPosition=i:console.log("Cannot solve path: no start position is set"),void 0!==s?this.endPosition=s:console.log("Cannot solve path: no end position is set"),this.updateNode(this.startPosition,null,0)}}class d{constructor(t){this.gameController=t,this.isAnimationOn=!0,this.lastUpdate=-Number.MAX_VALUE,this.start=t=>{this.pathFinder=t,this.pathFinderDelay=this.gameController.getPathFinderDelay(),window.requestAnimationFrame(this.animationLoop),this.isAnimationOn=!0},this.animationLoop=t=>{this.isAnimationOn&&window.requestAnimationFrame(this.animationLoop),t-this.lastUpdate<this.pathFinderDelay||(this.lastUpdate=t,this.pathFinder.nextStep()||(this.isAnimationOn=!1,this.gameController.disableSettingsControls(!1)),this.gameController.updateDisplay())}}}const r=new Map([["start",s.SetStart],["end",s.SetEnd],["wall",s.SetWall],["delete",s.RemoveWall]]);class g{constructor(t){this.gameModel=t,this.isMouseDown=!1,this.registerMediator=t=>{this.mediator=t},this.handleSettingsDisplay=()=>{this.disableSettingsControls(!0),this.mediator.showSettingsForm()},this.disableSettingsControls=t=>this.gameView.disableSettingsControls(t),this.initGrid=t=>{this.gameModel.initGrid(t.nbColumn,t.nbLine),this.gameView.updateDisplay()},this.clearSolution=()=>this.gameModel.clearSolution(),this.updateDisplay=()=>{this.gameView.updateDisplay()},this.hasObstacle=t=>this.gameModel.getGridElement(t.x,t.y)===i.Wall,this.setExploredPosition=t=>{this.gameModel.setGridElement(t.x,t.y,i.Explored)},this.setToExplorePosition=t=>this.gameModel.setGridElement(t.x,t.y,i.ToExplore),this.setPathPosition=t=>this.gameModel.setGridElement(t.x,t.y,i.Path),this.getStartPosition=()=>this.gameModel.startPosition,this.getEndPosition=()=>this.gameModel.endPosition,this.getGridSize=()=>this.gameModel.settingsModel.gridSize,this.isInsideGrid=t=>t.x>=0&&t.y>=0&&t.x<this.gameModel.settingsModel.gridSize.nbColumn&&t.y<this.gameModel.settingsModel.gridSize.nbLine,this.isOnWall=t=>this.gameModel.getGridElement(t.x,t.y)===i.Wall,this.gridUpdate=(t,e,n)=>{const o=this.gameModel.getGridElement(t,e);switch(n){case s.SetStart:i.Default===o&&(this.gameModel.setStartPosition(t,e),this.gameView.updateDisplay());break;case s.SetEnd:i.Default===o&&(this.gameModel.setEndPosition(t,e),this.gameView.updateDisplay());break;case s.SetWall:i.Default===o&&(this.gameModel.setGridElement(t,e,i.Wall),this.gameView.updateDisplay());break;case s.RemoveWall:i.Wall===o&&(this.gameModel.setGridElement(t,e,i.Default),this.gameView.updateDisplay())}},this.getPathFinderDelay=()=>this.gameModel.getPathFinderDelay(),this.handleNewGrid=()=>{this.gameModel.resetGrid(),this.gameView.updateDisplay()},this.handleClearSolution=()=>{this.gameModel.clearSolution(),this.gameView.updateDisplay()},this.handleSolve=()=>{this.handleClearSolution();const t=new l(this,this.gameModel.settingsModel.useHeuristic);if(this.getPathFinderDelay()>0)this.gameView.disableSettingsControls(!0),this.animationController.start(t);else{for(;t.nextStep(););this.updateDisplay()}},this.processCanvasAction=(t,e)=>{const i=this.gameView.getPosition(t,e);this.gridUpdate(i.x,i.y,this.gameModel.gameMode)},this.handleCanvasMouseMove=t=>{this.isMouseDown&&this.processCanvasAction(t.x,t.y)},this.handleCanvasMouseDown=t=>{this.isMouseDown=!0,this.processCanvasAction(t.x,t.y)},this.handleCanvasMouseUp=()=>{this.isMouseDown=!1},this.handleGameModeChange=t=>{const e=t.target,i=r.get(e.value);void 0!==i&&this.gameModel.setGameMode(i)},this.gameView=new a(t),this.animationController=new d(this),this.gameView.addShowSettingsListener(this.handleSettingsDisplay),this.gameView.addCanvasListener("mousemove",this.handleCanvasMouseMove),this.gameView.addCanvasListener("mousedown",this.handleCanvasMouseDown),this.gameView.addCanvasListener("mouseup",this.handleCanvasMouseUp),this.gameView.addCanvasListener("mouseout",this.handleCanvasMouseUp),this.gameView.addGameModeListener(this.handleGameModeChange),this.gameView.addNewGridListener(this.handleNewGrid),this.gameView.addClearSolutionListener(this.handleClearSolution),this.gameView.addSolveListener(this.handleSolve)}}class m{constructor(t,e){this.gameController=t,this.settingsController=e,this.updateGameDisplay=t=>{this.gameController.initGrid(t)},this.showSettingsForm=()=>this.settingsController.showSettings(),this.disableSettingsControls=t=>this.gameController.disableSettingsControls(t)}}let u,c,p=new class{constructor(t,e,i,s){this.gridSize=t,this.useHeuristic=e,this.useDelay=i,this.delayInMs=s}}({nbLine:20,nbColumn:20},!0,!1,0),E=new class{constructor(t){this.settingsModel=t,this.initGrid=(t,e)=>{let s=[];this.startPosition=void 0,this.endPosition=void 0;for(let n=0;n<t;++n)s.push(Array(e).fill(i.Default));this.grid=s},this.clearSolution=()=>{this.setGridAction(((t,e)=>{[i.Path,i.Explored,i.ToExplore].includes(this.grid[t][e])&&(this.grid[t][e]=i.Default)}))},this.getPathFinderDelay=()=>this.settingsModel.useDelay?this.settingsModel.delayInMs:0,this.resetGrid=()=>{this.startPosition=void 0,this.endPosition=void 0,this.setGridAction(((t,e)=>this.grid[t][e]=i.Default))},this.setGridAction=t=>{for(let e=0;e<this.settingsModel.gridSize.nbColumn;++e)for(let i=0;i<this.settingsModel.gridSize.nbLine;++i)t(e,i)},this.resetPosition=t=>{void 0!==t&&this.setGridElement(t.x,t.y,i.Default)},this.setStartPosition=(t,e)=>{this.resetPosition(this.startPosition),this.startPosition=new n(t,e),this.setGridElement(t,e,i.StartPosition)},this.setEndPosition=(t,e)=>{this.resetPosition(this.endPosition),this.endPosition=new n(t,e),this.setGridElement(t,e,i.EndPosition)},this.setGameMode=t=>{s.Resolved!==this.gameMode&&(this.gameMode=t)},this.setGridElement=(t,e,i)=>{this.grid[t][e]=i},this.getGridElement=(t,e)=>this.grid[t][e],this.gameMode=s.SetStart,this.initGrid(t.gridSize.nbColumn,t.gridSize.nbLine)}}(p);window.onload=function(){var t;u=new e(p),c=new g(E),t=new m(c,u),u.registerMediator(t),c.registerMediator(t)},window.addEventListener("resize",(function(){c.updateDisplay()}))})();